// Generated by view binder compiler. Do not edit!
package com.tnmeta.torymeta.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatButton;
import androidx.appcompat.widget.AppCompatImageButton;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.core.widget.NestedScrollView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.tabs.TabLayout;
import com.pnikosis.materialishprogress.ProgressWheel;
import com.tnmeta.torymeta.R;
import com.tnmeta.torymeta.control.unity.UnityCharacterView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentToryAvatarProfileBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout avatarLayout;

  @NonNull
  public final RecyclerView avatarList;

  @NonNull
  public final ConstraintLayout bottomLayout;

  @NonNull
  public final ConstraintLayout buyButton;

  @NonNull
  public final ConstraintLayout buyInfoLayout;

  @NonNull
  public final TabLayout categoryTab;

  @NonNull
  public final ConstraintLayout categoryTitle;

  @NonNull
  public final RelativeLayout colorBodylayout;

  @NonNull
  public final ConstraintLayout colorSelect;

  @NonNull
  public final AppCompatImageView colorSelectBotttom;

  @NonNull
  public final ConstraintLayout colorSelectLayout;

  @NonNull
  public final RecyclerView colorSelectRecycleView;

  @NonNull
  public final AppCompatImageView colorSelectTop;

  @NonNull
  public final NestedScrollView conetentScrollView;

  @NonNull
  public final AppCompatImageView iconMileage;

  @NonNull
  public final AppCompatImageView iconMileage01;

  @NonNull
  public final AppCompatTextView imgClose;

  @NonNull
  public final AppCompatImageView imgRotation;

  @NonNull
  public final AppCompatImageView imgSort;

  @NonNull
  public final AppCompatImageView imgSortMileage;

  @NonNull
  public final AppCompatImageButton ivBack;

  @NonNull
  public final ProgressWheel loadingProgress;

  @NonNull
  public final AppCompatTextView myMemeberPoint;

  @NonNull
  public final AppCompatImageView reset;

  @NonNull
  public final AppCompatButton save;

  @NonNull
  public final ConstraintLayout sortLayout;

  @NonNull
  public final ConstraintLayout topLayout;

  @NonNull
  public final AppCompatTextView txtPurchase;

  @NonNull
  public final AppCompatTextView txtPurchaseCount;

  @NonNull
  public final UnityCharacterView unity;

  private FragmentToryAvatarProfileBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout avatarLayout, @NonNull RecyclerView avatarList,
      @NonNull ConstraintLayout bottomLayout, @NonNull ConstraintLayout buyButton,
      @NonNull ConstraintLayout buyInfoLayout, @NonNull TabLayout categoryTab,
      @NonNull ConstraintLayout categoryTitle, @NonNull RelativeLayout colorBodylayout,
      @NonNull ConstraintLayout colorSelect, @NonNull AppCompatImageView colorSelectBotttom,
      @NonNull ConstraintLayout colorSelectLayout, @NonNull RecyclerView colorSelectRecycleView,
      @NonNull AppCompatImageView colorSelectTop, @NonNull NestedScrollView conetentScrollView,
      @NonNull AppCompatImageView iconMileage, @NonNull AppCompatImageView iconMileage01,
      @NonNull AppCompatTextView imgClose, @NonNull AppCompatImageView imgRotation,
      @NonNull AppCompatImageView imgSort, @NonNull AppCompatImageView imgSortMileage,
      @NonNull AppCompatImageButton ivBack, @NonNull ProgressWheel loadingProgress,
      @NonNull AppCompatTextView myMemeberPoint, @NonNull AppCompatImageView reset,
      @NonNull AppCompatButton save, @NonNull ConstraintLayout sortLayout,
      @NonNull ConstraintLayout topLayout, @NonNull AppCompatTextView txtPurchase,
      @NonNull AppCompatTextView txtPurchaseCount, @NonNull UnityCharacterView unity) {
    this.rootView = rootView;
    this.avatarLayout = avatarLayout;
    this.avatarList = avatarList;
    this.bottomLayout = bottomLayout;
    this.buyButton = buyButton;
    this.buyInfoLayout = buyInfoLayout;
    this.categoryTab = categoryTab;
    this.categoryTitle = categoryTitle;
    this.colorBodylayout = colorBodylayout;
    this.colorSelect = colorSelect;
    this.colorSelectBotttom = colorSelectBotttom;
    this.colorSelectLayout = colorSelectLayout;
    this.colorSelectRecycleView = colorSelectRecycleView;
    this.colorSelectTop = colorSelectTop;
    this.conetentScrollView = conetentScrollView;
    this.iconMileage = iconMileage;
    this.iconMileage01 = iconMileage01;
    this.imgClose = imgClose;
    this.imgRotation = imgRotation;
    this.imgSort = imgSort;
    this.imgSortMileage = imgSortMileage;
    this.ivBack = ivBack;
    this.loadingProgress = loadingProgress;
    this.myMemeberPoint = myMemeberPoint;
    this.reset = reset;
    this.save = save;
    this.sortLayout = sortLayout;
    this.topLayout = topLayout;
    this.txtPurchase = txtPurchase;
    this.txtPurchaseCount = txtPurchaseCount;
    this.unity = unity;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentToryAvatarProfileBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentToryAvatarProfileBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_tory_avatar_profile, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentToryAvatarProfileBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.avatar_layout;
      ConstraintLayout avatarLayout = ViewBindings.findChildViewById(rootView, id);
      if (avatarLayout == null) {
        break missingId;
      }

      id = R.id.avatar_list;
      RecyclerView avatarList = ViewBindings.findChildViewById(rootView, id);
      if (avatarList == null) {
        break missingId;
      }

      id = R.id.bottom_layout;
      ConstraintLayout bottomLayout = ViewBindings.findChildViewById(rootView, id);
      if (bottomLayout == null) {
        break missingId;
      }

      id = R.id.buyButton;
      ConstraintLayout buyButton = ViewBindings.findChildViewById(rootView, id);
      if (buyButton == null) {
        break missingId;
      }

      id = R.id.buy_info_layout;
      ConstraintLayout buyInfoLayout = ViewBindings.findChildViewById(rootView, id);
      if (buyInfoLayout == null) {
        break missingId;
      }

      id = R.id.categoryTab;
      TabLayout categoryTab = ViewBindings.findChildViewById(rootView, id);
      if (categoryTab == null) {
        break missingId;
      }

      id = R.id.category_title;
      ConstraintLayout categoryTitle = ViewBindings.findChildViewById(rootView, id);
      if (categoryTitle == null) {
        break missingId;
      }

      id = R.id.colorBodylayout;
      RelativeLayout colorBodylayout = ViewBindings.findChildViewById(rootView, id);
      if (colorBodylayout == null) {
        break missingId;
      }

      id = R.id.colorSelect;
      ConstraintLayout colorSelect = ViewBindings.findChildViewById(rootView, id);
      if (colorSelect == null) {
        break missingId;
      }

      id = R.id.colorSelectBotttom;
      AppCompatImageView colorSelectBotttom = ViewBindings.findChildViewById(rootView, id);
      if (colorSelectBotttom == null) {
        break missingId;
      }

      id = R.id.colorSelectLayout;
      ConstraintLayout colorSelectLayout = ViewBindings.findChildViewById(rootView, id);
      if (colorSelectLayout == null) {
        break missingId;
      }

      id = R.id.colorSelectRecycleView;
      RecyclerView colorSelectRecycleView = ViewBindings.findChildViewById(rootView, id);
      if (colorSelectRecycleView == null) {
        break missingId;
      }

      id = R.id.colorSelectTop;
      AppCompatImageView colorSelectTop = ViewBindings.findChildViewById(rootView, id);
      if (colorSelectTop == null) {
        break missingId;
      }

      id = R.id.conetent_scrollView;
      NestedScrollView conetentScrollView = ViewBindings.findChildViewById(rootView, id);
      if (conetentScrollView == null) {
        break missingId;
      }

      id = R.id.icon_mileage;
      AppCompatImageView iconMileage = ViewBindings.findChildViewById(rootView, id);
      if (iconMileage == null) {
        break missingId;
      }

      id = R.id.icon_mileage_01;
      AppCompatImageView iconMileage01 = ViewBindings.findChildViewById(rootView, id);
      if (iconMileage01 == null) {
        break missingId;
      }

      id = R.id.imgClose;
      AppCompatTextView imgClose = ViewBindings.findChildViewById(rootView, id);
      if (imgClose == null) {
        break missingId;
      }

      id = R.id.img_rotation;
      AppCompatImageView imgRotation = ViewBindings.findChildViewById(rootView, id);
      if (imgRotation == null) {
        break missingId;
      }

      id = R.id.img_sort;
      AppCompatImageView imgSort = ViewBindings.findChildViewById(rootView, id);
      if (imgSort == null) {
        break missingId;
      }

      id = R.id.img_sort_mileage;
      AppCompatImageView imgSortMileage = ViewBindings.findChildViewById(rootView, id);
      if (imgSortMileage == null) {
        break missingId;
      }

      id = R.id.ivBack;
      AppCompatImageButton ivBack = ViewBindings.findChildViewById(rootView, id);
      if (ivBack == null) {
        break missingId;
      }

      id = R.id.loadingProgress;
      ProgressWheel loadingProgress = ViewBindings.findChildViewById(rootView, id);
      if (loadingProgress == null) {
        break missingId;
      }

      id = R.id.myMemeberPoint;
      AppCompatTextView myMemeberPoint = ViewBindings.findChildViewById(rootView, id);
      if (myMemeberPoint == null) {
        break missingId;
      }

      id = R.id.reset;
      AppCompatImageView reset = ViewBindings.findChildViewById(rootView, id);
      if (reset == null) {
        break missingId;
      }

      id = R.id.save;
      AppCompatButton save = ViewBindings.findChildViewById(rootView, id);
      if (save == null) {
        break missingId;
      }

      id = R.id.sort_layout;
      ConstraintLayout sortLayout = ViewBindings.findChildViewById(rootView, id);
      if (sortLayout == null) {
        break missingId;
      }

      id = R.id.topLayout;
      ConstraintLayout topLayout = ViewBindings.findChildViewById(rootView, id);
      if (topLayout == null) {
        break missingId;
      }

      id = R.id.txtPurchase;
      AppCompatTextView txtPurchase = ViewBindings.findChildViewById(rootView, id);
      if (txtPurchase == null) {
        break missingId;
      }

      id = R.id.txtPurchaseCount;
      AppCompatTextView txtPurchaseCount = ViewBindings.findChildViewById(rootView, id);
      if (txtPurchaseCount == null) {
        break missingId;
      }

      id = R.id.unity;
      UnityCharacterView unity = ViewBindings.findChildViewById(rootView, id);
      if (unity == null) {
        break missingId;
      }

      return new FragmentToryAvatarProfileBinding((ConstraintLayout) rootView, avatarLayout,
          avatarList, bottomLayout, buyButton, buyInfoLayout, categoryTab, categoryTitle,
          colorBodylayout, colorSelect, colorSelectBotttom, colorSelectLayout,
          colorSelectRecycleView, colorSelectTop, conetentScrollView, iconMileage, iconMileage01,
          imgClose, imgRotation, imgSort, imgSortMileage, ivBack, loadingProgress, myMemeberPoint,
          reset, save, sortLayout, topLayout, txtPurchase, txtPurchaseCount, unity);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
