// Generated by view binder compiler. Do not edit!
package com.tnmeta.torymeta.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.tnmeta.torymeta.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class MyOpenSeminarItemListBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout bottomLayout;

  @NonNull
  public final AppCompatTextView divide;

  @NonNull
  public final Guideline guideline;

  @NonNull
  public final AppCompatImageView iconDelete;

  @NonNull
  public final AppCompatImageView iconLink;

  @NonNull
  public final AppCompatImageView iconLock;

  @NonNull
  public final ConstraintLayout modify;

  @NonNull
  public final ConstraintLayout passwordOpenLayout;

  @NonNull
  public final AppCompatTextView seminarCount;

  @NonNull
  public final AppCompatTextView seminarDate;

  @NonNull
  public final AppCompatTextView seminarDesc;

  @NonNull
  public final ConstraintLayout seminarEnter;

  @NonNull
  public final AppCompatImageView seminarImage;

  @NonNull
  public final ConstraintLayout seminarImageLayout;

  @NonNull
  public final AppCompatTextView seminarMaxCount;

  @NonNull
  public final AppCompatTextView seminarSituation;

  @NonNull
  public final ConstraintLayout seminarSituationLayout;

  @NonNull
  public final AppCompatTextView seminarTitle;

  @NonNull
  public final ConstraintLayout titleLayout;

  @NonNull
  public final AppCompatTextView txtOpenPassword;

  @NonNull
  public final AppCompatTextView txtPassword;

  private MyOpenSeminarItemListBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout bottomLayout, @NonNull AppCompatTextView divide,
      @NonNull Guideline guideline, @NonNull AppCompatImageView iconDelete,
      @NonNull AppCompatImageView iconLink, @NonNull AppCompatImageView iconLock,
      @NonNull ConstraintLayout modify, @NonNull ConstraintLayout passwordOpenLayout,
      @NonNull AppCompatTextView seminarCount, @NonNull AppCompatTextView seminarDate,
      @NonNull AppCompatTextView seminarDesc, @NonNull ConstraintLayout seminarEnter,
      @NonNull AppCompatImageView seminarImage, @NonNull ConstraintLayout seminarImageLayout,
      @NonNull AppCompatTextView seminarMaxCount, @NonNull AppCompatTextView seminarSituation,
      @NonNull ConstraintLayout seminarSituationLayout, @NonNull AppCompatTextView seminarTitle,
      @NonNull ConstraintLayout titleLayout, @NonNull AppCompatTextView txtOpenPassword,
      @NonNull AppCompatTextView txtPassword) {
    this.rootView = rootView;
    this.bottomLayout = bottomLayout;
    this.divide = divide;
    this.guideline = guideline;
    this.iconDelete = iconDelete;
    this.iconLink = iconLink;
    this.iconLock = iconLock;
    this.modify = modify;
    this.passwordOpenLayout = passwordOpenLayout;
    this.seminarCount = seminarCount;
    this.seminarDate = seminarDate;
    this.seminarDesc = seminarDesc;
    this.seminarEnter = seminarEnter;
    this.seminarImage = seminarImage;
    this.seminarImageLayout = seminarImageLayout;
    this.seminarMaxCount = seminarMaxCount;
    this.seminarSituation = seminarSituation;
    this.seminarSituationLayout = seminarSituationLayout;
    this.seminarTitle = seminarTitle;
    this.titleLayout = titleLayout;
    this.txtOpenPassword = txtOpenPassword;
    this.txtPassword = txtPassword;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static MyOpenSeminarItemListBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static MyOpenSeminarItemListBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.my_open_seminar_item_list, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static MyOpenSeminarItemListBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bottom_layout;
      ConstraintLayout bottomLayout = ViewBindings.findChildViewById(rootView, id);
      if (bottomLayout == null) {
        break missingId;
      }

      id = R.id.divide;
      AppCompatTextView divide = ViewBindings.findChildViewById(rootView, id);
      if (divide == null) {
        break missingId;
      }

      id = R.id.guideline;
      Guideline guideline = ViewBindings.findChildViewById(rootView, id);
      if (guideline == null) {
        break missingId;
      }

      id = R.id.icon_delete;
      AppCompatImageView iconDelete = ViewBindings.findChildViewById(rootView, id);
      if (iconDelete == null) {
        break missingId;
      }

      id = R.id.icon_link;
      AppCompatImageView iconLink = ViewBindings.findChildViewById(rootView, id);
      if (iconLink == null) {
        break missingId;
      }

      id = R.id.icon_lock;
      AppCompatImageView iconLock = ViewBindings.findChildViewById(rootView, id);
      if (iconLock == null) {
        break missingId;
      }

      id = R.id.modify;
      ConstraintLayout modify = ViewBindings.findChildViewById(rootView, id);
      if (modify == null) {
        break missingId;
      }

      id = R.id.password_open_layout;
      ConstraintLayout passwordOpenLayout = ViewBindings.findChildViewById(rootView, id);
      if (passwordOpenLayout == null) {
        break missingId;
      }

      id = R.id.seminar_count;
      AppCompatTextView seminarCount = ViewBindings.findChildViewById(rootView, id);
      if (seminarCount == null) {
        break missingId;
      }

      id = R.id.seminar_date;
      AppCompatTextView seminarDate = ViewBindings.findChildViewById(rootView, id);
      if (seminarDate == null) {
        break missingId;
      }

      id = R.id.seminar_desc;
      AppCompatTextView seminarDesc = ViewBindings.findChildViewById(rootView, id);
      if (seminarDesc == null) {
        break missingId;
      }

      id = R.id.seminar_enter;
      ConstraintLayout seminarEnter = ViewBindings.findChildViewById(rootView, id);
      if (seminarEnter == null) {
        break missingId;
      }

      id = R.id.seminar_image;
      AppCompatImageView seminarImage = ViewBindings.findChildViewById(rootView, id);
      if (seminarImage == null) {
        break missingId;
      }

      id = R.id.seminar_image_layout;
      ConstraintLayout seminarImageLayout = ViewBindings.findChildViewById(rootView, id);
      if (seminarImageLayout == null) {
        break missingId;
      }

      id = R.id.seminar_max_count;
      AppCompatTextView seminarMaxCount = ViewBindings.findChildViewById(rootView, id);
      if (seminarMaxCount == null) {
        break missingId;
      }

      id = R.id.seminar_situation;
      AppCompatTextView seminarSituation = ViewBindings.findChildViewById(rootView, id);
      if (seminarSituation == null) {
        break missingId;
      }

      id = R.id.seminar_situation_layout;
      ConstraintLayout seminarSituationLayout = ViewBindings.findChildViewById(rootView, id);
      if (seminarSituationLayout == null) {
        break missingId;
      }

      id = R.id.seminar_title;
      AppCompatTextView seminarTitle = ViewBindings.findChildViewById(rootView, id);
      if (seminarTitle == null) {
        break missingId;
      }

      id = R.id.title_layout;
      ConstraintLayout titleLayout = ViewBindings.findChildViewById(rootView, id);
      if (titleLayout == null) {
        break missingId;
      }

      id = R.id.txt_open_password;
      AppCompatTextView txtOpenPassword = ViewBindings.findChildViewById(rootView, id);
      if (txtOpenPassword == null) {
        break missingId;
      }

      id = R.id.txt_password;
      AppCompatTextView txtPassword = ViewBindings.findChildViewById(rootView, id);
      if (txtPassword == null) {
        break missingId;
      }

      return new MyOpenSeminarItemListBinding((ConstraintLayout) rootView, bottomLayout, divide,
          guideline, iconDelete, iconLink, iconLock, modify, passwordOpenLayout, seminarCount,
          seminarDate, seminarDesc, seminarEnter, seminarImage, seminarImageLayout, seminarMaxCount,
          seminarSituation, seminarSituationLayout, seminarTitle, titleLayout, txtOpenPassword,
          txtPassword);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
