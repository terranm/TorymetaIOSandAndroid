// Generated by view binder compiler. Do not edit!
package com.tnmeta.torymeta.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.HorizontalScrollView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageButton;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.tnmeta.torymeta.R;
import com.tnmeta.torymeta.control.ToryLoungeButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentChattingLoungeBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final FloatingActionButton actionUpMove;

  @NonNull
  public final RecyclerView chattingRecyclerView;

  @NonNull
  public final AppCompatTextView emptyView;

  @NonNull
  public final AppCompatTextView filterAll;

  @NonNull
  public final ConstraintLayout filterAllLayout;

  @NonNull
  public final AppCompatTextView filterImpassible;

  @NonNull
  public final ConstraintLayout filterImpassibleLayout;

  @NonNull
  public final AppCompatTextView filterOpen;

  @NonNull
  public final ConstraintLayout filterOpenLayout;

  @NonNull
  public final AppCompatTextView filterPassible;

  @NonNull
  public final ConstraintLayout filterPossibleLayout;

  @NonNull
  public final AppCompatTextView filterPrivate;

  @NonNull
  public final ConstraintLayout filterPrivateLayout;

  @NonNull
  public final AppCompatImageButton ivBack;

  @NonNull
  public final CoordinatorLayout layoutCoordinator;

  @NonNull
  public final SwipeRefreshLayout refreshLayout;

  @NonNull
  public final ConstraintLayout sortLayout;

  @NonNull
  public final HorizontalScrollView sortScrollviewLayout;

  @NonNull
  public final AppCompatTextView title;

  @NonNull
  public final ConstraintLayout topLayout;

  @NonNull
  public final ToryLoungeButton toryLounge;

  private FragmentChattingLoungeBinding(@NonNull ConstraintLayout rootView,
      @NonNull FloatingActionButton actionUpMove, @NonNull RecyclerView chattingRecyclerView,
      @NonNull AppCompatTextView emptyView, @NonNull AppCompatTextView filterAll,
      @NonNull ConstraintLayout filterAllLayout, @NonNull AppCompatTextView filterImpassible,
      @NonNull ConstraintLayout filterImpassibleLayout, @NonNull AppCompatTextView filterOpen,
      @NonNull ConstraintLayout filterOpenLayout, @NonNull AppCompatTextView filterPassible,
      @NonNull ConstraintLayout filterPossibleLayout, @NonNull AppCompatTextView filterPrivate,
      @NonNull ConstraintLayout filterPrivateLayout, @NonNull AppCompatImageButton ivBack,
      @NonNull CoordinatorLayout layoutCoordinator, @NonNull SwipeRefreshLayout refreshLayout,
      @NonNull ConstraintLayout sortLayout, @NonNull HorizontalScrollView sortScrollviewLayout,
      @NonNull AppCompatTextView title, @NonNull ConstraintLayout topLayout,
      @NonNull ToryLoungeButton toryLounge) {
    this.rootView = rootView;
    this.actionUpMove = actionUpMove;
    this.chattingRecyclerView = chattingRecyclerView;
    this.emptyView = emptyView;
    this.filterAll = filterAll;
    this.filterAllLayout = filterAllLayout;
    this.filterImpassible = filterImpassible;
    this.filterImpassibleLayout = filterImpassibleLayout;
    this.filterOpen = filterOpen;
    this.filterOpenLayout = filterOpenLayout;
    this.filterPassible = filterPassible;
    this.filterPossibleLayout = filterPossibleLayout;
    this.filterPrivate = filterPrivate;
    this.filterPrivateLayout = filterPrivateLayout;
    this.ivBack = ivBack;
    this.layoutCoordinator = layoutCoordinator;
    this.refreshLayout = refreshLayout;
    this.sortLayout = sortLayout;
    this.sortScrollviewLayout = sortScrollviewLayout;
    this.title = title;
    this.topLayout = topLayout;
    this.toryLounge = toryLounge;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentChattingLoungeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentChattingLoungeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_chatting_lounge, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentChattingLoungeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.actionUpMove;
      FloatingActionButton actionUpMove = ViewBindings.findChildViewById(rootView, id);
      if (actionUpMove == null) {
        break missingId;
      }

      id = R.id.chatting_recyclerView;
      RecyclerView chattingRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (chattingRecyclerView == null) {
        break missingId;
      }

      id = R.id.emptyView;
      AppCompatTextView emptyView = ViewBindings.findChildViewById(rootView, id);
      if (emptyView == null) {
        break missingId;
      }

      id = R.id.filter_all;
      AppCompatTextView filterAll = ViewBindings.findChildViewById(rootView, id);
      if (filterAll == null) {
        break missingId;
      }

      id = R.id.filter_all_layout;
      ConstraintLayout filterAllLayout = ViewBindings.findChildViewById(rootView, id);
      if (filterAllLayout == null) {
        break missingId;
      }

      id = R.id.filter_impassible;
      AppCompatTextView filterImpassible = ViewBindings.findChildViewById(rootView, id);
      if (filterImpassible == null) {
        break missingId;
      }

      id = R.id.filter_impassible_layout;
      ConstraintLayout filterImpassibleLayout = ViewBindings.findChildViewById(rootView, id);
      if (filterImpassibleLayout == null) {
        break missingId;
      }

      id = R.id.filter_open;
      AppCompatTextView filterOpen = ViewBindings.findChildViewById(rootView, id);
      if (filterOpen == null) {
        break missingId;
      }

      id = R.id.filter_open_layout;
      ConstraintLayout filterOpenLayout = ViewBindings.findChildViewById(rootView, id);
      if (filterOpenLayout == null) {
        break missingId;
      }

      id = R.id.filter_passible;
      AppCompatTextView filterPassible = ViewBindings.findChildViewById(rootView, id);
      if (filterPassible == null) {
        break missingId;
      }

      id = R.id.filter_possible_layout;
      ConstraintLayout filterPossibleLayout = ViewBindings.findChildViewById(rootView, id);
      if (filterPossibleLayout == null) {
        break missingId;
      }

      id = R.id.filter_private;
      AppCompatTextView filterPrivate = ViewBindings.findChildViewById(rootView, id);
      if (filterPrivate == null) {
        break missingId;
      }

      id = R.id.filter_private_layout;
      ConstraintLayout filterPrivateLayout = ViewBindings.findChildViewById(rootView, id);
      if (filterPrivateLayout == null) {
        break missingId;
      }

      id = R.id.ivBack;
      AppCompatImageButton ivBack = ViewBindings.findChildViewById(rootView, id);
      if (ivBack == null) {
        break missingId;
      }

      id = R.id.layout_coordinator;
      CoordinatorLayout layoutCoordinator = ViewBindings.findChildViewById(rootView, id);
      if (layoutCoordinator == null) {
        break missingId;
      }

      id = R.id.refresh_layout;
      SwipeRefreshLayout refreshLayout = ViewBindings.findChildViewById(rootView, id);
      if (refreshLayout == null) {
        break missingId;
      }

      id = R.id.sort_layout;
      ConstraintLayout sortLayout = ViewBindings.findChildViewById(rootView, id);
      if (sortLayout == null) {
        break missingId;
      }

      id = R.id.sort_scrollview_layout;
      HorizontalScrollView sortScrollviewLayout = ViewBindings.findChildViewById(rootView, id);
      if (sortScrollviewLayout == null) {
        break missingId;
      }

      id = R.id.title;
      AppCompatTextView title = ViewBindings.findChildViewById(rootView, id);
      if (title == null) {
        break missingId;
      }

      id = R.id.topLayout;
      ConstraintLayout topLayout = ViewBindings.findChildViewById(rootView, id);
      if (topLayout == null) {
        break missingId;
      }

      id = R.id.tory_lounge;
      ToryLoungeButton toryLounge = ViewBindings.findChildViewById(rootView, id);
      if (toryLounge == null) {
        break missingId;
      }

      return new FragmentChattingLoungeBinding((ConstraintLayout) rootView, actionUpMove,
          chattingRecyclerView, emptyView, filterAll, filterAllLayout, filterImpassible,
          filterImpassibleLayout, filterOpen, filterOpenLayout, filterPassible,
          filterPossibleLayout, filterPrivate, filterPrivateLayout, ivBack, layoutCoordinator,
          refreshLayout, sortLayout, sortScrollviewLayout, title, topLayout, toryLounge);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
