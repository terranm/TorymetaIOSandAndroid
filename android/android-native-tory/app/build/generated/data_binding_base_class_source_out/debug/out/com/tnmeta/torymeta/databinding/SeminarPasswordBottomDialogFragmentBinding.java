// Generated by view binder compiler. Do not edit!
package com.tnmeta.torymeta.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatEditText;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.tnmeta.torymeta.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class SeminarPasswordBottomDialogFragmentBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout apply;

  @NonNull
  public final AppCompatImageView close;

  @NonNull
  public final AppCompatImageView editBoxDeleteBtn;

  @NonNull
  public final RelativeLayout editComfirmLayout;

  @NonNull
  public final AppCompatImageView editConfirmDeleteBtn;

  @NonNull
  public final AppCompatEditText editConfirmPassword;

  @NonNull
  public final RelativeLayout editLayout;

  @NonNull
  public final AppCompatEditText editPassword;

  @NonNull
  public final AppCompatTextView title;

  @NonNull
  public final ConstraintLayout titleLayout;

  @NonNull
  public final AppCompatTextView txtPassword;

  @NonNull
  public final AppCompatTextView txtPasswordConfirm;

  private SeminarPasswordBottomDialogFragmentBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout apply, @NonNull AppCompatImageView close,
      @NonNull AppCompatImageView editBoxDeleteBtn, @NonNull RelativeLayout editComfirmLayout,
      @NonNull AppCompatImageView editConfirmDeleteBtn,
      @NonNull AppCompatEditText editConfirmPassword, @NonNull RelativeLayout editLayout,
      @NonNull AppCompatEditText editPassword, @NonNull AppCompatTextView title,
      @NonNull ConstraintLayout titleLayout, @NonNull AppCompatTextView txtPassword,
      @NonNull AppCompatTextView txtPasswordConfirm) {
    this.rootView = rootView;
    this.apply = apply;
    this.close = close;
    this.editBoxDeleteBtn = editBoxDeleteBtn;
    this.editComfirmLayout = editComfirmLayout;
    this.editConfirmDeleteBtn = editConfirmDeleteBtn;
    this.editConfirmPassword = editConfirmPassword;
    this.editLayout = editLayout;
    this.editPassword = editPassword;
    this.title = title;
    this.titleLayout = titleLayout;
    this.txtPassword = txtPassword;
    this.txtPasswordConfirm = txtPasswordConfirm;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static SeminarPasswordBottomDialogFragmentBinding inflate(
      @NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static SeminarPasswordBottomDialogFragmentBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.seminar_password_bottom_dialog_fragment, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static SeminarPasswordBottomDialogFragmentBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.apply;
      ConstraintLayout apply = ViewBindings.findChildViewById(rootView, id);
      if (apply == null) {
        break missingId;
      }

      id = R.id.close;
      AppCompatImageView close = ViewBindings.findChildViewById(rootView, id);
      if (close == null) {
        break missingId;
      }

      id = R.id.editBoxDeleteBtn;
      AppCompatImageView editBoxDeleteBtn = ViewBindings.findChildViewById(rootView, id);
      if (editBoxDeleteBtn == null) {
        break missingId;
      }

      id = R.id.edit_comfirm_layout;
      RelativeLayout editComfirmLayout = ViewBindings.findChildViewById(rootView, id);
      if (editComfirmLayout == null) {
        break missingId;
      }

      id = R.id.edit_confirm_deleteBtn;
      AppCompatImageView editConfirmDeleteBtn = ViewBindings.findChildViewById(rootView, id);
      if (editConfirmDeleteBtn == null) {
        break missingId;
      }

      id = R.id.edit_confirm_password;
      AppCompatEditText editConfirmPassword = ViewBindings.findChildViewById(rootView, id);
      if (editConfirmPassword == null) {
        break missingId;
      }

      id = R.id.edit_layout;
      RelativeLayout editLayout = ViewBindings.findChildViewById(rootView, id);
      if (editLayout == null) {
        break missingId;
      }

      id = R.id.edit_password;
      AppCompatEditText editPassword = ViewBindings.findChildViewById(rootView, id);
      if (editPassword == null) {
        break missingId;
      }

      id = R.id.title;
      AppCompatTextView title = ViewBindings.findChildViewById(rootView, id);
      if (title == null) {
        break missingId;
      }

      id = R.id.title_layout;
      ConstraintLayout titleLayout = ViewBindings.findChildViewById(rootView, id);
      if (titleLayout == null) {
        break missingId;
      }

      id = R.id.txt_password;
      AppCompatTextView txtPassword = ViewBindings.findChildViewById(rootView, id);
      if (txtPassword == null) {
        break missingId;
      }

      id = R.id.txt_password_confirm;
      AppCompatTextView txtPasswordConfirm = ViewBindings.findChildViewById(rootView, id);
      if (txtPasswordConfirm == null) {
        break missingId;
      }

      return new SeminarPasswordBottomDialogFragmentBinding((ConstraintLayout) rootView, apply,
          close, editBoxDeleteBtn, editComfirmLayout, editConfirmDeleteBtn, editConfirmPassword,
          editLayout, editPassword, title, titleLayout, txtPassword, txtPasswordConfirm);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
